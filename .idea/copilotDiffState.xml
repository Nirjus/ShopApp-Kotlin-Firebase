<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/shopapp/BaseApplication.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/shopapp/BaseApplication.kt" />
              <option name="originalContent" value="package com.example.shopapp&#10;&#10;import android.app.Application&#10;import android.util.Log&#10;import com.amplifyframework.AmplifyException&#10;import com.amplifyframework.auth.cognito.AWSCognitoAuthPlugin&#10;import com.amplifyframework.core.Amplify&#10;import com.amplifyframework.storage.s3.AWSS3StoragePlugin&#10;import com.example.shopapp.data.repo.RepoImpl&#10;import com.example.shopapp.domain.repo.AdminRepo&#10;import dagger.hilt.android.HiltAndroidApp&#10;import kotlinx.coroutines.CoroutineExceptionHandler&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.SupervisorJob&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltAndroidApp&#10;class BaseApplication : Application() {&#10;    @Inject&#10;    lateinit var repoImpl: RepoImpl&#10;//&#10;    @Inject&#10;    lateinit var adminRepo: AdminRepo&#10;&#10;    private val exceptionHandler = CoroutineExceptionHandler { _, throwable -&gt;&#10;        Log.e(&quot;BaseApplication&quot;, &quot;Coroutine exception: ${throwable.message}&quot;, throwable)&#10;    }&#10;&#10;    private val applicationScope = CoroutineScope(SupervisorJob() + Dispatchers.IO + exceptionHandler)&#10;&#10;    override fun onCreate() {&#10;        super.onCreate()&#10;        Log.d(&quot;BaseApplication&quot;, &quot;onCreate called&quot;)&#10;        try {&#10;            initializeAmplify()&#10;            Log.d(&quot;BaseApplication&quot;, &quot;initializeAWS called&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;BaseApplication&quot;, &quot;Exception in onCreate: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    private fun initializeAmplify() {&#10;        try {&#10;            Amplify.addPlugin(AWSCognitoAuthPlugin())&#10;            Amplify.addPlugin(AWSS3StoragePlugin())&#10;            Amplify.configure(applicationContext)&#10;            &#10;            // Initialize guest access&#10;            Amplify.Auth.signOut(&#10;                { Log.i(&quot;AmplifyQuickstart&quot;, &quot;Signed out, guest access enabled&quot;) },&#10;                { error -&gt; Log.e(&quot;AmplifyQuickstart&quot;, &quot;Sign out failed&quot;, error) }&#10;            )&#10;        } catch (error: AmplifyException) {&#10;            Log.e(&quot;BaseApplication&quot;, &quot;Could not initialize Amplify&quot;, error)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;BaseApplication&quot;, &quot;Unexpected error during Amplify initialization: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.shopapp&#10;&#10;import android.app.Application&#10;import android.util.Log&#10;import com.amplifyframework.AmplifyException&#10;import com.amplifyframework.auth.cognito.AWSCognitoAuthPlugin&#10;import com.amplifyframework.core.Amplify&#10;import com.amplifyframework.storage.s3.AWSS3StoragePlugin&#10;import com.example.shopapp.data.repo.RepoImpl&#10;import com.example.shopapp.domain.repo.AdminRepo&#10;import dagger.hilt.android.HiltAndroidApp&#10;import kotlinx.coroutines.CoroutineExceptionHandler&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.SupervisorJob&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltAndroidApp&#10;class BaseApplication : Application() {&#10;    @Inject&#10;    lateinit var repoImpl: RepoImpl&#10;//&#10;    @Inject&#10;    lateinit var adminRepo: AdminRepo&#10;&#10;    private val exceptionHandler = CoroutineExceptionHandler { _, throwable -&gt;&#10;        Log.e(&quot;BaseApplication&quot;, &quot;Coroutine exception: ${throwable.message}&quot;, throwable)&#10;    }&#10;&#10;    private val applicationScope = CoroutineScope(SupervisorJob() + Dispatchers.IO + exceptionHandler)&#10;&#10;    override fun onCreate() {&#10;        super.onCreate()&#10;        Log.d(&quot;BaseApplication&quot;, &quot;onCreate called&quot;)&#10;        try {&#10;            initializeAmplify()&#10;            Log.d(&quot;BaseApplication&quot;, &quot;initializeAWS called&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;BaseApplication&quot;, &quot;Exception in onCreate: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    private fun initializeAmplify() {&#10;        try {&#10;            // Configure plugins&#10;            Amplify.addPlugin(AWSCognitoAuthPlugin())&#10;            Amplify.addPlugin(AWSS3StoragePlugin())&#10;            &#10;            // Configure Amplify&#10;            Amplify.configure(applicationContext)&#10;            &#10;            // Initialize guest access using coroutine to ensure completion&#10;            applicationScope.launch {&#10;                try {&#10;                    // First ensure we're signed out&#10;                    Amplify.Auth.signOut()&#10;                    &#10;                    // Get the Cognito identity ID for guest access&#10;                    Amplify.Auth.fetchAuthSession(&#10;                        { session -&gt;&#10;                            Log.i(&quot;AmplifyQuickstart&quot;, &quot;Guest access initialized&quot;)&#10;                        },&#10;                        { error -&gt; &#10;                            Log.e(&quot;AmplifyQuickstart&quot;, &quot;Failed to initialize guest access&quot;, error)&#10;                        }&#10;                    )&#10;                } catch (e: Exception) {&#10;                    Log.e(&quot;BaseApplication&quot;, &quot;Error initializing guest access&quot;, e)&#10;                }&#10;            }&#10;        } catch (error: AmplifyException) {&#10;            Log.e(&quot;BaseApplication&quot;, &quot;Could not initialize Amplify&quot;, error)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;BaseApplication&quot;, &quot;Unexpected error during Amplify initialization: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/shopapp/domain/repository/UserRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/shopapp/domain/repository/UserRepository.kt" />
              <option name="updatedContent" value="package com.example.shopapp.domain.repository&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/shopapp/domain/use_case/GetCurrentUserUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/shopapp/domain/use_case/GetCurrentUserUseCase.kt" />
              <option name="updatedContent" value="package com.example.shopapp.domain.use_case&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/shopapp/domain/utils/FirebaseUserUtils.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/shopapp/domain/utils/FirebaseUserUtils.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/shopapp/domain/utils/UserRoleUtils.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/shopapp/domain/utils/UserRoleUtils.kt" />
              <option name="updatedContent" value="package com.example.shopapp.domain.utils&#10;&#10;import com.example.shopapp.domain.models.UserData&#10;import com.example.shopapp.domain.models.UserRoles&#10;&#10;fun isUserAdmin(userData: UserData?): Boolean {&#10;    return userData?.userRole == UserRoles.ADMIN&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/raw/amplifyconfiguration.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/raw/amplifyconfiguration.json" />
              <option name="originalContent" value="{&#10;    &quot;UserAgent&quot;: &quot;aws-amplify-cli/2.0&quot;,&#10;    &quot;Version&quot;: &quot;1.0&quot;,&#10;    &quot;auth&quot;: {&#10;        &quot;plugins&quot;: {&#10;            &quot;awsCognitoAuthPlugin&quot;: {&#10;                &quot;UserAgent&quot;: &quot;aws-amplify-cli/2.0&quot;,&#10;                &quot;Version&quot;: &quot;1.0&quot;,&#10;                &quot;IdentityManager&quot;: {&#10;                    &quot;Default&quot;: {}&#10;                },&#10;                &quot;CredentialsProvider&quot;: {&#10;                    &quot;CognitoIdentity&quot;: {&#10;                        &quot;Default&quot;: {&#10;                            &quot;PoolId&quot;: &quot;ap-south-1:9a7c27f2-7147-4de3-9054-a4570b6af3a2&quot;,&#10;                            &quot;Region&quot;: &quot;ap-south-1&quot;,&#10;                            &quot;AllowUnauthenticatedIdentities&quot;: true&#10;                        }&#10;                    }&#10;                },&#10;                &quot;Auth&quot;: {&#10;                    &quot;Default&quot;: {&#10;                        &quot;authenticationFlowType&quot;: &quot;USER_SRP_AUTH&quot;,&#10;                        &quot;OAuth&quot;: {&#10;                            &quot;WebDomain&quot;: &quot;your-domain.auth.ap-south-1.amazoncognito.com&quot;,&#10;                            &quot;AppClientId&quot;: &quot;your-app-client-id&quot;,&#10;                            &quot;SignInRedirectURI&quot;: &quot;myapp://callback/&quot;,&#10;                            &quot;SignOutRedirectURI&quot;: &quot;myapp://signout/&quot;,&#10;                            &quot;Scopes&quot;: [&#10;                                &quot;email&quot;,&#10;                                &quot;openid&quot;&#10;                            ]&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    },&#10;    &quot;storage&quot;: {&#10;        &quot;plugins&quot;: {&#10;            &quot;awsS3StoragePlugin&quot;: {&#10;                &quot;bucket&quot;: &quot;my-kotlin-app-bucket&quot;,&#10;                &quot;region&quot;: &quot;ap-south-1&quot;,&#10;                &quot;defaultAccessLevel&quot;: &quot;guest&quot;&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;    &quot;UserAgent&quot;: &quot;aws-amplify-cli/2.0&quot;,&#10;    &quot;Version&quot;: &quot;1.0&quot;,&#10;    &quot;auth&quot;: {&#10;        &quot;plugins&quot;: {&#10;            &quot;awsCognitoAuthPlugin&quot;: {&#10;                &quot;UserAgent&quot;: &quot;aws-amplify-cli/2.0&quot;,&#10;                &quot;Version&quot;: &quot;1.0&quot;,&#10;                &quot;IdentityManager&quot;: {&#10;                    &quot;Default&quot;: {}&#10;                },&#10;                &quot;CredentialsProvider&quot;: {&#10;                    &quot;CognitoIdentity&quot;: {&#10;                        &quot;Default&quot;: {&#10;                            &quot;PoolId&quot;: &quot;ap-south-1:9a7c27f2-7147-4de3-9054-a4570b6af3a2&quot;,&#10;                            &quot;Region&quot;: &quot;ap-south-1&quot;,&#10;                            &quot;AllowUnauthenticatedIdentities&quot;: true&#10;                        }&#10;                    }&#10;                },&#10;                &quot;Auth&quot;: {&#10;                    &quot;Default&quot;: {&#10;                        &quot;authenticationFlowType&quot;: &quot;USER_SRP_AUTH&quot;,&#10;                        &quot;OAuth&quot;: {&#10;                            &quot;WebDomain&quot;: &quot;your-domain.auth.ap-south-1.amazoncognito.com&quot;,&#10;                            &quot;AppClientId&quot;: &quot;your-app-client-id&quot;,&#10;                            &quot;SignInRedirectURI&quot;: &quot;myapp://callback/&quot;,&#10;                            &quot;SignOutRedirectURI&quot;: &quot;myapp://signout/&quot;,&#10;                            &quot;Scopes&quot;: [&#10;                                &quot;email&quot;,&#10;                                &quot;openid&quot;&#10;                            ]&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    },&#10;    &quot;storage&quot;: {&#10;        &quot;plugins&quot;: {&#10;            &quot;awsS3StoragePlugin&quot;: {&#10;                &quot;bucket&quot;: &quot;my-kotlin-app-bucket&quot;,&#10;                &quot;region&quot;: &quot;ap-south-1&quot;,&#10;                &quot;defaultAccessLevel&quot;: &quot;guest&quot;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>